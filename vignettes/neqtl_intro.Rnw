%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Aimee Teo Broman
% Introduction to neqtl library
%
% This is an "Sweave" document
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%\VignetteIndexEntry{Introduction to neqtl}
%\VignetteDepends{qtl,neqtl}
\documentclass[12pt,fullpage]{article}
\usepackage{fullpage}
\marginparwidth 0pt
\oddsidemargin 0pt
\evensidemargin 0pt
\topmargin 0pt
\textwidth 6.5in
\textheight 8.5in
\usepackage{fancyheadings}
\usepackage{amsmath}
\usepackage{color}
\usepackage{sectsty}
\raggedbottom

% revise margins
\setlength{\headheight}{0.0in}
\setlength{\topmargin}{-0.25in}
\setlength{\headsep}{0.0in}
\setlength{\textheight}{9.00in}
\setlength{\footskip}{0.5in}
\setlength{\oddsidemargin}{0in}
\setlength{\evensidemargin}{0in}
\setlength{\textwidth}{6.5in}

\setlength{\parskip}{6pt}
\setlength{\parindent}{0pt}

\sectionfont{\large}

\newcommand{\code}{\texttt}

\begin{document}

\SweaveOpts{prefix.string=neqtl}
\setkeys{Gin}{width=\textwidth} %% <- change width of figures
% Try to get the R code from running into the margin
<<echo=FALSE>>=
options(width=77)
@ 

% Change S input/output font size
%\DefineVerbatimEnvironment{Sinput}{Verbatim}{fontsize=\footnotesize, baselinestretch=0.75, formatcom = {\color[rgb]{0, 0, 0.56}}}
%\DefineVerbatimEnvironment{Soutput}{Verbatim}{fontsize=\footnotesize, baselinestretch=0.75, formatcom = {\color[rgb]{0.56, 0, 0}}}

\textbf{\large An Introduction to \code{neqtl}} \\
Aimee Teo Broman, 11 May 2012

\bigskip

The \code{neqtl} package is intended to supplement the \code{qtl} library
with functions to determine QTL position for a large number
of expression traits, count qtl along the genome, and determine
proxal/distal (CIS/Trans) trait status. 

In this document, I describe how to use the functions in the \code{neqtl}
package.  We'll look at the \code{fake.f2expr} data as an example.
This is a simulated expression cross, with 500 individuals, and 1000
expression traits.

In this analysis we define a QTL position to be the position of the
maximum LOD score on a chromosome for LOD greater than a specified
threshold.

\section{Setup}

First, load the \code{qtl}, \code{neqtl} packages, and data.
<<<loaddata>>=
library(qtl)
library(neqtl)
data(fake.f2expr)
@ 

I run \code{calc.genoprob} and \code{scanone} for all traits.

<<<scanoneA>>=
fake.f2expr <- calc.genoprob(fake.f2expr)
out.f2 <- scanone(fake.f2expr,pheno.col=1:nphe(fake.f2expr),method="hk")
@ 

\section{Significant LOD threshold}
  
The \code{nullsims} function will estimate the 95th percentile of the
null distribution of maximum LOD score across the genome; this
threshold may be used to define a QTL. 


The \code{nullsims} function simulates a null distribution for
maximum LOD score across the genome.  The function will generate a
vector of length \code{n.sim} of maximum LOD when the phenotypes are
random values (i.e. no underlying QTL).  Additive covariates will have
little effect on the maximum LOD, but interactive covariates should be
included in the null simulation.

<<nullsimsA>>=
nd <- nullsims(fake.f2expr,n.sim=1000,method="hk")
quantile(nd,probs=0.95)
@ 

\section{Maximum LOD and position of maximum LOD}
  
The \code{maxlod} function inputs the scanone object with all
expression traits and returns a list with two elements: the first,
\code{maxlod}, is a matrix of maximum LOD score by chromosome and
trait, and the second, \code{maxlod.pos}, is a list, by chromosome, of
positions where the maximum LOD score occurs for each trait.  The
output from \code{maxlod} may be directly inputted to
\code{maxlod.sigpos}, which returns a subset of the \code{maxlod.pos}
list, with positions of traits where the maximum LOD was above \code{sig.lod}.

<<maxlod>>=
sig.lod <- quantile(nd,probs=0.95)
maxlod.out <- maxlod(out.f2)
sigpos.out <- maxlod.sigpos(maxlod.out,sig.lod=sig.lod)
@ 

\section{Number of significant QTL per position}
  
The \code{neqtl} function counts the number of QTL within a specified
window, centered at each position, usually positions output by \code{scanone}.

<<neqtl>>=
neqtl.out <- neqtl(sigpos.out,chr=out.f2[,f2[,2],win=5)
@

<<fig=TRUE,height=4,width=8>>=
plot(neqtl.out)
title("Number of traits with significant max LOD")
@

\section{Proximal and Distal traits}

In this analysis, We define proximal traits as being within a given
window centered at the position given in the annotation file.  For
example, if the window size is 5 cM, the maximum LOD score for that
chromosome must be +/- 2.5 cM from the annotation position to be
considered a proximal QTL.

The \code{peaks} function will determine proximal (\code{cis}) and
distal (\code{trans}) traits, given an annotation
data.frame. The data.frame contains two columns: one for
chromosome, as a factor, and position, given in the same units as the
\code{scanone} object. Rownames of the annotation file are the trait
names as they are specified in the column names of the \code{scanone}
object.

First, load the annotation file for the expression traits.

<<annotation>>=
data(fake.annot)
@

The \code{peaks} function outputs a list with 10 elements, defining
traits that have significant peaks near their annotated position.
Only traits that have positions listed in the \code{annot} data.frame
will be in the output.

<<peaks>>=
peaks.out <- peaks(maxlod.out,sigpos.out,annot=fake.annot,win=5)
@

The \code{peaks} element of the output is a data.frame with
information from the \code{cis}, and \code{trans} list elements.

<<unlistpeaks>>=
peaks.out$peaks[1:10,]
@

The \code{plotpeaks} function produces a plot of QTL position
vs. annotation position.

<<fig=TRUE,height=8,width=8>>=
plotpeaks(peaks.out$peaks,map=pull.map(fake.f2expr))
@

\section{Positions with maximal number of QTL}

The \code{findpeaks} function uses output from the \code{neqtl}
function and finds the positions where the highest number of QTL
occur.

<<findpeaks>>=
hot.pos <- findpeaks(neqtl.out,n.peaks=5)
hot.pos
@

The \code{findpeaks.traits} function will list all traits that have
QTL within a \code{win} range of the given positions.

<<findpeaks.traits>>=
hot.traits <- findpeaks.traits(chr=hot.pos[,1],pos=hot.pos[,2],
              sigpos.out,maxlod.out,peaks.out)
hot.traits[1:10,]
@

\section{Heatmap of \code{scanone} object}

The \code{image.scanone} function is an extension of the
\code{plot.scanone} function for the purposes of plotting the scanone
output of a large number of traits.  The plot works best for n<100
traits; for more traits than this, plot on separate pages. It is
useful for seeing where a given list of traits maps (e.g. traits that
are associated with a certain function).

<<fig=TRUE,height=10,width=10>>=
image.scanone(out.f2,lodcolumn=1:50)
@

Annotation positions may be added to the plot, as well an indicator
for proximal traits, from the \code{peaks} function.  The
\code{threshold.lod} parameter will keep only traits that have LOD
score above \code{threshold.lod} in the figure.

<<cisannot>>=
cisnames <- unlist(sapply(peaks.out$maxpos.cis,names))
cisnames[1:10]
@
<<fig=TRUE,height=5,width=10>>=
image.scanone(out.f2,lodcolumn=1:50,annot=fake.annot,cisnam=cisnames,
              threshold.lod=sig.lod)
@

\end{document}
